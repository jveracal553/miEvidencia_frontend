{"ast":null,"code":"'use strict';\n\nmodule.exports = function () {\n  return {\n    onRequest: function onRequest(evt) {\n      if (evt.adapter !== 'xhr') {\n        return;\n      }\n\n      var xhr = evt.request;\n      var context = evt.context;\n\n      if ('upload' in xhr && 'onprogress' in xhr.upload) {\n        xhr.upload.onprogress = handleProgress('upload');\n      }\n\n      if ('onprogress' in xhr) {\n        xhr.onprogress = handleProgress('download');\n      }\n\n      function handleProgress(stage) {\n        return function (event) {\n          var percent = event.lengthComputable ? event.loaded / event.total * 100 : -1;\n          context.channels.progress.publish({\n            stage: stage,\n            percent: percent,\n            total: event.total,\n            loaded: event.loaded,\n            lengthComputable: event.lengthComputable\n          });\n        };\n      }\n    }\n  };\n};","map":{"version":3,"mappings":";;AAAAA,OAAOC,OAAPD,GAAiB;EAAA,OAAO;IACtBE,WAAW,wBAAO;MAChB,IAAIC,IAAIC,OAAJD,KAAgB,KAApB,EAA2B;QACzB;MACD;;MAED,IAAME,MAAMF,IAAIG,OAAhB;MACA,IAAMC,UAAUJ,IAAII,OAApB;;MAEA,IAAI,YAAYF,GAAZ,IAAmB,gBAAgBA,IAAIG,MAA3C,EAAmD;QACjDH,IAAIG,MAAJH,CAAWI,UAAXJ,GAAwBK,eAAe,QAAfA,CAAxBL;MACD;;MAED,IAAI,gBAAgBA,GAApB,EAAyB;QACvBA,IAAII,UAAJJ,GAAiBK,eAAe,UAAfA,CAAjBL;MACD;;MAED,SAASK,cAAT,CAAwBC,KAAxB,EAA+B;QAC7B,OAAO,iBAAS;UACd,IAAMC,UAAUC,MAAMC,gBAAND,GAA0BA,MAAME,MAANF,GAAeA,MAAMG,KAArBH,GAA8B,GAAxDA,GAA8D,CAAC,CAA/E;UACAN,QAAQU,QAARV,CAAiBW,QAAjBX,CAA0BY,OAA1BZ,CAAkC;YAChCI,YADgC;YAEhCC,gBAFgC;YAGhCI,OAAOH,MAAMG,KAHmB;YAIhCD,QAAQF,MAAME,MAJkB;YAKhCD,kBAAkBD,MAAMC;UALQ,CAAlCP;QAFF;MAUD;IACF;EA7BqB,CAAP;AAAjB","names":["module","exports","onRequest","evt","adapter","xhr","request","context","upload","onprogress","handleProgress","stage","percent","event","lengthComputable","loaded","total","channels","progress","publish"],"sources":["../../../src/middleware/progress/browser-progress.js"],"sourcesContent":["module.exports = () => ({\n  onRequest: evt => {\n    if (evt.adapter !== 'xhr') {\n      return\n    }\n\n    const xhr = evt.request\n    const context = evt.context\n\n    if ('upload' in xhr && 'onprogress' in xhr.upload) {\n      xhr.upload.onprogress = handleProgress('upload')\n    }\n\n    if ('onprogress' in xhr) {\n      xhr.onprogress = handleProgress('download')\n    }\n\n    function handleProgress(stage) {\n      return event => {\n        const percent = event.lengthComputable ? (event.loaded / event.total) * 100 : -1\n        context.channels.progress.publish({\n          stage,\n          percent,\n          total: event.total,\n          loaded: event.loaded,\n          lengthComputable: event.lengthComputable\n        })\n      }\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}