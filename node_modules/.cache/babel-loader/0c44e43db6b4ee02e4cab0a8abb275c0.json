{"ast":null,"code":"'use strict';\n\nvar pubsub = require('nano-pubsub');\n\nvar middlewareReducer = require('./util/middlewareReducer');\n\nvar processOptions = require('./middleware/defaultOptionsProcessor');\n\nvar validateOptions = require('./middleware/defaultOptionsValidator');\n\nvar httpRequest = require('./request'); // node-request in node, browser-request in browsers\n\n\nvar channelNames = ['request', 'response', 'progress', 'error', 'abort'];\nvar middlehooks = ['processOptions', 'validateOptions', 'interceptRequest', 'finalizeOptions', 'onRequest', 'onResponse', 'onError', 'onReturn', 'onHeaders'];\n\nmodule.exports = function createRequester() {\n  var initMiddleware = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var loadedMiddleware = [];\n  var middleware = middlehooks.reduce(function (ware, name) {\n    ware[name] = ware[name] || [];\n    return ware;\n  }, {\n    processOptions: [processOptions],\n    validateOptions: [validateOptions]\n  });\n\n  function request(opts) {\n    var channels = channelNames.reduce(function (target, name) {\n      target[name] = pubsub();\n      return target;\n    }, {}); // Prepare a middleware reducer that can be reused throughout the lifecycle\n\n    var applyMiddleware = middlewareReducer(middleware); // Parse the passed options\n\n    var options = applyMiddleware('processOptions', opts); // Validate the options\n\n    applyMiddleware('validateOptions', options); // Build a context object we can pass to child handlers\n\n    var context = {\n      options: options,\n      channels: channels,\n      applyMiddleware: applyMiddleware // We need to hold a reference to the current, ongoing request,\n      // in order to allow cancellation. In the case of the retry middleware,\n      // a new request might be triggered\n\n    };\n    var ongoingRequest = null;\n    var unsubscribe = channels.request.subscribe(function (ctx) {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, function (err, res) {\n        return onResponse(err, res, ctx);\n      });\n    }); // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n\n    channels.abort.subscribe(function () {\n      unsubscribe();\n\n      if (ongoingRequest) {\n        ongoingRequest.abort();\n      }\n    }); // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n\n    var returnValue = applyMiddleware('onReturn', channels, context); // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n\n    if (returnValue === channels) {\n      channels.request.publish(context);\n    }\n\n    return returnValue;\n\n    function onResponse(reqErr, res, ctx) {\n      var error = reqErr;\n      var response = res; // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx);\n        } catch (err) {\n          response = null;\n          error = err;\n        }\n      } // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n\n\n      error = error && applyMiddleware('onError', error, ctx); // Figure out if we should publish on error/response channels\n\n      if (error) {\n        channels.error.publish(error);\n      } else if (response) {\n        channels.response.publish(response);\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value');\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error('Tried to add middleware that was a function. It probably expects you to pass options to it.');\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error('Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event');\n    }\n\n    middlehooks.forEach(function (key) {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key]);\n      }\n    });\n    loadedMiddleware.push(newMiddleware);\n    return request;\n  };\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware);\n  };\n\n  initMiddleware.forEach(request.use);\n  return request;\n};","map":{"version":3,"mappings":"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","names":["pubsub","require","middlewareReducer","processOptions","validateOptions","httpRequest","channelNames","middlehooks","module","exports","createRequester","initMiddleware","loadedMiddleware","middleware","reduce","ware","name","request","opts","channels","target","applyMiddleware","options","context","ongoingRequest","unsubscribe","subscribe","ctx","err","res","onResponse","abort","returnValue","publish","reqErr","error","response","use","newMiddleware","Error","onReturn","length","forEach","key","push","clone"],"sources":["../src/index.js"],"sourcesContent":["const pubsub = require('nano-pubsub')\nconst middlewareReducer = require('./util/middlewareReducer')\nconst processOptions = require('./middleware/defaultOptionsProcessor')\nconst validateOptions = require('./middleware/defaultOptionsValidator')\nconst httpRequest = require('./request') // node-request in node, browser-request in browsers\n\nconst channelNames = ['request', 'response', 'progress', 'error', 'abort']\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders'\n]\n\nmodule.exports = function createRequester(initMiddleware = []) {\n  const loadedMiddleware = []\n  const middleware = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions]\n    }\n  )\n\n  function request(opts) {\n    const channels = channelNames.reduce((target, name) => {\n      target[name] = pubsub()\n      return target\n    }, {})\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest = null\n    const unsubscribe = channels.request.subscribe(ctx => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n\n    function onResponse(reqErr, res, ctx) {\n      let error = reqErr\n      let response = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach(key => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key])\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware)\n  }\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n"]},"metadata":{},"sourceType":"script"}